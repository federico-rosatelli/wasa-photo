openapi: 3.0.3
info:
  title: WasaPhoto
  description: |-
    This is the project for Wasa (web and software
    architecture)
  version: "b-1.1.0"
paths:
  /signin:
    post:
      tags: ["signin"]
      summary: Logs in the user
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              description: |
                Name of the user
              type: object
              properties:
                name:
                  description: |
                    The name
                  type: string
                  example: Maria
                  pattern: '^[a-zA-Z]*'
                  minLength: 3
                  maxLength: 16
        required: true
      responses:
        '201':
          description: User log-in action successful
          content:
            application/json:
              schema:
                description: |
                  Id token of the user
                type: object
                properties:
                  identifier:
                    description: |
                      The token
                    type: string
                    example: a35f6dfa-69dc-11ed-a1eb-0242ac120002
                    pattern: '^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$'
                    minLength: 36
                    maxLength: 36

  /addphoto:
    post:
      tags: ["addPhoto"]
      operationId: uploadPhoto
      summary: Post a new photo
      description: |
        Post a new photo
      security:
        - LegacyAuth: []
      requestBody:
        description: |
          The user must provides the photo data and the text.
        content:
          multipart/form-data:
            schema:
              description: |
                Post for the Image
              type: object
              properties:
                text:
                  description: |
                    Text of the photo
                  type: string
                  example: Test
                  pattern: '^.*'
                  minLength: 1
                  maxLength: 256
                myFile:
                  description: |
                    The photo
                  type: string
                  format: binary
                  minLength: 0
                  maxLength: 99999999999999999
        required: true
      responses:
        "201":
          description: Photo uploaded successful
          content:
            application/json:
              schema: {$ref: "#/components/schemas/basicProfile"}
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /:
    get:
      tags: ["getstream"]
      summary: Stream of the user
      description: |-
        Get the stream of the user identified by id and username.
        The stream is an array of object
      security:
        - LegacyAuth: []
      operationId: getMyStream
      responses:
        "200":
          description: Stream Sended successful
          content:
            application/json:
              schema:
                description: |
                  Array of streamContent
                type: array
                minItems: 0
                maxItems: 99999999999
                items: {$ref: "#/components/schemas/streamContent"}
        "400": { $ref: "#/components/responses/BadRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /profile:
    get:
      tags: ["myProfile"]
      operationId: myProfile
      summary: Get my Profile
      description: |-
        /profile provides all info about the user's profile
        and options to edit it
      security:
        - LegacyAuth: []
      responses:
        "200":
          description: Profile Sended successful
          content:
            application/json:
              schema: {$ref: "#/components/schemas/basicProfile"}
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "500": { $ref: "#/components/responses/InternalServerError" }
    post:
      tags: ["myProfile"]
      operationId: setMyUserName
      summary: Set my Name Surname and Username
      description: |
        Based on body request the name, surname and
        username will be changed
      security:
        - LegacyAuth: []
      requestBody:
        description: |
          The user must provides a new username, name and surname.
          The propertie could be empty.
        content:
          application/json:
            schema:
              type: object
              description: The schema of the profile
              properties:
                newUsername:
                  description: |
                    New Username
                  type: string
                  pattern: '^[a-zA-Z]*'
                  example: Maria
                  minLength: 3
                  maxLength: 16
                name:
                  description: |
                    New Name
                  type: string
                  example: Mario
                  pattern: '^[a-zA-Z]*'
                  minLength: 1
                  maxLength: 30
                surname:
                  description: |
                    New Surname
                  type: string
                  example: Rossi
                  pattern: '^[a-zA-Z]*'
                  minLength: 1
                  maxLength: 30
        required: false
      responses:
        "201":
          description: Status Ok
          content:
            application/json:
              schema: {$ref: "#/components/schemas/basicProfile"}
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "500": { $ref: "#/components/responses/InternalServerError" }
  
  /profile/{id}:
    parameters:
      - {$ref: "#/components/parameters/IdParam"}
    get:
      tags: ["UserProfile"]
      operationId: getUserProfile
      summary: Get user profile by id
      description: | 
        Get basic info on user profile by his id
      security:
        - LegacyAuth: []
      responses:
        "200":
          description: Status Ok
          content:
            application/json:
              schema: {$ref: "#/components/schemas/basicProfile"}
        "400": { $ref: "#/components/responses/BadRequest" }
        "404": { $ref: "#/components/responses/NotFound" }
        "500": { $ref: "#/components/responses/InternalServerError" }
    put:
      tags: ["UserProfile"]
      operationId: followUser
      summary: Follow user by id
      description: |
        Follow user by id
      security:
        - LegacyAuth: []
      responses:
        "201":
          description: Status Ok
          content:
            application/json:
              schema: {$ref: "#/components/schemas/basicProfile"}
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "404": { $ref: "#/components/responses/NotFound" }
        "500": { $ref: "#/components/responses/InternalServerError" }
    delete:
      tags: ["UserProfile"]
      operationId: unfollowUser
      summary: Unfollow user by id
      description: |
        Unfollow user by id
      security:
        - LegacyAuth: []
      responses:
        "201":
          description: Status Ok
          content:
            application/json:
              schema: {$ref: "#/components/schemas/basicProfile"}
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "404": { $ref: "#/components/responses/NotFound" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /ban/{id}:
    parameters:
      - {$ref: "#/components/parameters/IdParam"}
    put:
      tags: ["BanProfile"]
      operationId: banUser
      summary: Ban user by id
      description: |
        Ban user by id
      security:
        - LegacyAuth: []
      responses:
        "201":
          description: Status Ok
          content:
            application/json:
              schema: {$ref: "#/components/schemas/basicProfile"}
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "404": { $ref: "#/components/responses/NotFound" }
        "500": { $ref: "#/components/responses/InternalServerError" }
    delete:
      tags: ["BanProfile"]
      operationId: unbanUser
      summary: unBan user by id
      description: |
        unBan user by id
      security:
        - LegacyAuth: []
      responses:
        "201":
          description: Status Ok
          content:
            application/json:
              schema: {$ref: "#/components/schemas/basicProfile"}
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "404": { $ref: "#/components/responses/NotFound" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /profile/{id}/image/{imageId}:
    parameters:
      - {$ref: "#/components/parameters/IdParam"}
      - {$ref: "#/components/parameters/ImageIdParam"}
    get:
      tags: ["profileImage"]
      operationId: imageProfile
      summary: Get user image by id
      description: | 
        Get image info by imageId and userId
      security:
        - LegacyAuth: []
      responses:
        "200":
          description: Status Ok
          content:
            application/json:
              schema: {$ref: "#/components/schemas/completeImage"}
        "400": { $ref: "#/components/responses/BadRequest" }
        "404": { $ref: "#/components/responses/NotFound" }
        "500": { $ref: "#/components/responses/InternalServerError" }
    delete:
      tags: ["profileImage"]
      operationId: deletePhoto
      summary: Delete image
      description: |
        Delete image of the user.
      security:
        - LegacyAuth: []
      responses:
        "201":
          description: Status Ok
          content:
            application/json:
              schema: {$ref: "#/components/schemas/basicProfile"}
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "404": { $ref: "#/components/responses/NotFound" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /profile/{id}/like/{imageId}:
    parameters:
      - {$ref: "#/components/parameters/IdParam"}
      - {$ref: "#/components/parameters/ImageIdParam"}
    put:
      tags: ["profileImageLike"]
      operationId: likePhoto
      summary: Add Like
      description: |
        Add like on image by id
      security:
        - LegacyAuth: []
      responses:
        "201":
          description: Status Ok
          content:
            application/json:
              schema: {$ref: "#/components/schemas/completeImage"}
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "404": { $ref: "#/components/responses/NotFound" }
        "500": { $ref: "#/components/responses/InternalServerError" }
    delete:
      tags: ["profileImageLike"]
      operationId: unlikePhoto
      summary: Delete Like
      description: |
        Delete like on image by id
      security:
        - LegacyAuth: []
      responses:
        "201":
          description: Status Ok
          content:
            application/json:
              schema: {$ref: "#/components/schemas/completeImage"}
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "404": { $ref: "#/components/responses/NotFound" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /profile/{id}/comment/{imageId}:
    parameters:
      - {$ref: "#/components/parameters/IdParam"}
      - {$ref: "#/components/parameters/ImageIdParam"}
    post:
      tags: ["profileImageComment"]
      operationId: commentPhoto
      summary: Add Comment
      description: |
        Add comment on image by id
      security:
        - LegacyAuth: []
      requestBody:
        description: |
          The properties of the post schema is defined by the content
          of the comment. The username and id of the user is passed by the security token.
        content:
          application/json:
            schema:
              description: |
                Content to post
              type: object
              properties:
                content:
                  type: string
                  pattern: '^.*'
                  example: Comment
                  minLength: 3
                  maxLength: 16
        required: true
      responses:
        "201":
          description: Status Ok
          content:
            application/json:
              schema: {$ref: "#/components/schemas/completeImage"}
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "404": { $ref: "#/components/responses/NotFound" }
        "500": { $ref: "#/components/responses/InternalServerError" }
    delete:
      parameters:
        - { $ref: "#/components/parameters/Index" }
      tags: ["profileImageComment"]
      operationId: uncommentPhoto
      summary: Delete Comment
      description: |
        Delete comment on image by id
      security:
        - LegacyAuth: []
      responses:
        "201":
          description: Status Ok
          content:
            application/json:
              schema: {$ref: "#/components/schemas/completeImage"}
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "404": { $ref: "#/components/responses/NotFound" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /profile/{id}/ultra:
    parameters:
      - {$ref: "#/components/parameters/IdParam"}
    get:
      tags: ["UserProfile"]
      operationId: ultraBasicProfile
      summary: Get user ultra basic profile by id
      description: | 
        Get ultra basic profile of a user profile by his id
      security:
        - LegacyAuth: []
      responses:
        "200":
          description: Status Ok
          content:
            application/json:
              schema: {$ref: "#/components/schemas/ultraBasicProfile"}
        "400": { $ref: "#/components/responses/BadRequest" }
        "404": { $ref: "#/components/responses/NotFound" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /profile/{id}/followers:
    parameters:
      - {$ref: "#/components/parameters/IdParam"}
    get:
      tags: ["UserProfile"]
      operationId: followersProfile
      summary: Get user followers by id
      description: | 
        Get all followers of a user profile by his id
      security:
        - LegacyAuth: []
      responses:
        "200":
          description: Status Ok
          content:
            application/json:
              schema:
                description: |
                  ultraBasicProfile array response
                type: array
                minItems: 0
                maxItems: 9999999999999
                items: {$ref: "#/components/schemas/ultraBasicProfile"}
        "400": { $ref: "#/components/responses/BadRequest" }
        "404": { $ref: "#/components/responses/NotFound" }
        "500": { $ref: "#/components/responses/InternalServerError" }
  
  /profile/{id}/followings:
    get:
      parameters:
        - {$ref: "#/components/parameters/IdParam"}
      tags: ["UserProfile"]
      operationId: followingsProfile
      summary: Get user followings by id
      description: | 
        Get all followings of a user profile by his id
      security:
        - LegacyAuth: []
      responses:
        "200":
          description: Status Ok
          content:
            application/json:
              schema:
                description: |
                  ultraBasicProfile array response
                type: array
                minItems: 0
                maxItems: 9999999999999
                items: {$ref: "#/components/schemas/ultraBasicProfile"}
        "400": { $ref: "#/components/responses/BadRequest" }
        "404": { $ref: "#/components/responses/NotFound" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /search:
    parameters:
      - {$ref: "#/components/parameters/Search"}
    get:
      tags: ["searchProfile"]
      operationId: searchProfile
      summary: Search fo User
      
      description: |-
        Search by query a user.
        It'll always return a list of ultra-basic
        information of the user.
      security:
        - LegacyAuth: []
      responses:
        "200":
          description: Status Ok
          content:
            application/json:
              schema:
                description: |
                  ultraBasicProfile array response
                type: array
                minItems: 0
                maxItems: 9999999999999
                items: {$ref: "#/components/schemas/ultraBasicProfile"}
        "400": { $ref: "#/components/responses/BadRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }

components:
  schemas:
    basicProfile:
      title: Get Basic Profile Info
      description: |
        The basic profile return an object with the information
        of the user such as username, id, profile picture, name, surname,
        the number of the followers and followings and the basic image object.
      type: object
      properties:
        Username:
          description: |
            Username of the user
          type: string
          example: Maria
          pattern: '^[a-zA-Z]*'
          minLength: 3
          maxLength: 16
        Id:
          description: |
            Id of the user
          type: string
          example: a35f6dfa-69dc-11ed-a1eb-0242ac120002
          pattern: '^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$'
          minLength: 36
          maxLength: 36
        ProfilePictureLocation:
          description: |
            Location of the image picture of the user
          type: string
          example: /images/a35f6dfa-69dc-11ed-a1eb-0242ac120002.png
          pattern: '^/images/[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}.png$'
          minLength: 48
          maxLength: 48
        Name:
          description: |
            Name of the user
          type: string
          example: Mario
          pattern: '^[a-zA-Z]*'
          maxLength: 20
          minLength: 0
        Surname:
          description: |
            Surname of the user
          type: string
          example: Rossi
          pattern: '^[a-zA-Z]*'
          maxLength: 20
          minLength: 0
        Followers:
          description: |
            Number of followers of the user
          type: integer
          minimum: 0
          maximum: 99999999999
        Followings:
          description: |
            Number of followings of the user
          type: integer
          minimum: 0
          maximum: 99999999999
        Images:
          description: |
            Images of the user
          type: array
          minItems: 0
          maxItems: 99999999999
          items:
            $ref: "#/components/schemas/basicImage"
    basicImage:
      title: Get Basic Image Info
      type: object
      description: |
        The basic image return an object with the image information
        such as the id of the image, the location, time creation,
        the number of the likes and comments of the photo and the text
        chosen by the user.
      properties:
        idImage:
          description: |
            Id of the image
          type: string
          example: a35f6dfa-69dc-11ed-a1eb-0242ac120002
          pattern: '^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$'
          minLength: 36
          maxLength: 36
        Location:
          description: |
            Location of the image
          type: string
          example: /images/a35f6dfa-69dc-11ed-a1eb-0242ac120002.png
          pattern: '^/images/[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}.png$'
          minLength: 48
          maxLength: 48
        Time:
          description: |
            Unix time of creation of the image
          type: integer
          minimum: 0
          maximum: 99999999999
        Likes:
          description: |
            Number of likes of the image
          type: integer
          minimum: 0
          maximum: 99999999999
        Comments:
          description: |
            Number of comments of the image
          type: integer
          minimum: 0
          maximum: 99999999999
        Text:
          description: |
            Text of the image
          type: string
          example: Text Image
          pattern: '^.*'
          minLength: 1
          maxLength: 256
    completeImage:
      title: Get Image Info
      type: object
      description: |
        The image info return an object with all image information
        such as the id of the image, the location, time creation,
        the text chosen by the user and two object arrays, one for the likes
        and the other for the comments.
      properties:
        idImage:
          description: |
            Id of the image
          type: string
          example: a35f6dfa-69dc-11ed-a1eb-0242ac120002
          pattern: '^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$'
          minLength: 36
          maxLength: 36
        Location:
          description: |
            Location of the image
          type: string
          example: /images/a35f6dfa-69dc-11ed-a1eb-0242ac120002.png
          pattern: '^/images/[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}.png$'
          minLength: 48
          maxLength: 48
        Time:
          description: |
            Unix time of creation of the image
          type: integer
          minimum: 0
          maximum: 99999999999
        Likes:
          description: |
            Likes of the image
          type: array
          minItems: 0
          maxItems: 99999999999
          items:
            $ref: "#/components/schemas/likes"
        Comments:
          description: |
            Comments of the image
          type: array
          minItems: 0
          maxItems: 99999999999
          items:
            $ref: "#/components/schemas/comments"
        Text:
          description: |
            Text of the image
          type: string
          pattern: '^.*'
          minLength: 1
          maxLength: 256
    likes:
      title: Get Likes
      type: object
      description: | 
        The like return an object with all like information
        such as the user id who liked the photo and the time of the like
      properties:
        UserIdLike:
          description: |
            Username of the user
          type: string
          example: a35f6dfa-69dc-11ed-a1eb-0242ac120002
          pattern: '^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$'
          minLength: 36
          maxLength: 36
        Time:
          description: |
            Unix time of the like
          type: integer
          minimum: 0
          maximum: 99999999999
    comments:
      title: Get Comments
      type: object
      description: |
        The comment return an object with all comment information
        such as the user id who comment the photo, the time of the comment and
        the content of the comment
      properties:
        UserIdComment:
          description: |
            Id of the user of the comment
          type: string
          example: a35f6dfa-69dc-11ed-a1eb-0242ac120002
          pattern: '^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$'
          minLength: 36
          maxLength: 36
        Time:
          description: |
            Unix time of the comment
          type: integer
          minimum: 0
          maximum: 99999999999
        Content:
          description: |
            Content of the comment
          type: string
          example: Comment
          pattern: '^.*'
          minLength: 0
          maxLength: 256
    ultraBasicProfile:
      title: Get Ultra Basic Profile Info
      type: object
      description: |
        The ultra basic profile is used to get the very basic information of a user.
        It'll return an object with user information such as the username, the id and the
        profile picture.
      properties:
        Username:
          description: |
            Username of the user
          type: string
          pattern: '^[a-zA-Z]*'
          minLength: 3
          maxLength: 16
        Id:
          description: |
            Id of the user
          type: string
          example: a35f6dfa-69dc-11ed-a1eb-0242ac120002
          pattern: '^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$'
          minLength: 36
          maxLength: 36
        ProfilePictureLocation:
          description: |
            Location of the profile picture of the user
          type: string
          example: /images/a35f6dfa-69dc-11ed-a1eb-0242ac120002.png
          pattern: '^/images/[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}.png$'
          minLength: 48
          maxLength: 48
    streamContent:
      title: The content of the stream object
      type: object
      description: |
        The stream content return an object with image information for the homepage of a user.
        That object is compose by the username of the user of the image, his id, the image id, 
        the image location, the time of creation of the image, the text of the image and two object arrays, 
        one for the likes of the image and the other for the comments
      properties:
        Username:
          description: |
            Username of the Image Content displayed in homepage
          type: string
          pattern: '^[a-zA-Z]*'
          minLength: 3
          maxLength: 16
        Id:
          description: |
            Id of the User of the Image Content displayed in homepage
          type: string
          example: a35f6dfa-69dc-11ed-a1eb-0242ac120002
          pattern: '^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$'
          minLength: 36
          maxLength: 36
        ProfilePictureLocation:
          description: |
            Location of profile of the user of the Image Content displayed in homepage
          type: string
          example: /images/a35f6dfa-69dc-11ed-a1eb-0242ac120002.png
          pattern: '^/images/[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}.png$'
          minLength: 48
          maxLength: 48
        ImageId:
          description: |
            Id of the Image displayed in homepage
          type: string
          example: a35f6dfa-69dc-11ed-a1eb-0242ac120002
          pattern: '^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$'
          minLength: 36
          maxLength: 36
        ImageLocation:
          description: |
            Location of the Image displayed in homepage
          type: string
          example: /images/a35f6dfa-69dc-11ed-a1eb-0242ac120002.png
          pattern: '^/images/[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}.png$'
          minLength: 48
          maxLength: 48
        Time:
          description: |
            Unix time of creation of the content
          type: integer
          minimum: 0
          maximum: 99999999999
        Comments:
          description: |
            Number of comments of the Image displayed in homepage
          type: integer
          minimum: 0
          maximum: 99999999999
        Likes:
          description: |
            Number of likes of the Image displayed in homepage
          type: integer
          minimum: 0
          maximum: 99999999999
        Text:
          description: |
            Description of the Image displayed in homepage
          type: string
          example: Text Image
          minLength: 1
          maxLength: 256
          pattern: '^.*'

  securitySchemes:
    LegacyAuth:
      type: apiKey
      in: header
      name: Token
      description: |-
        App session token value. This value is sent by the server in the login
        and session refresh APIs.

  responses:
    Unauthorized:
      description: The access token is missing or it isn't matchin with username
      headers:
        WWW_Authenticate:
          schema:
            description: |
              String of error
            type: string
            example: Error
            minLength: 1
            maxLength: 256
            pattern: '^.*'

    BadRequest:
      description: Missing fields

    InternalServerError:
      description: The server encountered an internal error. Further info in server logs
    NotFound:
      description: Page Not Found

  parameters:
    Search:
      schema: 
        description: |
            The username to search
        type: string
        example: Maria
        pattern: '^.*?$'
        minLength: 3
        maxLength: 16
      name: search
      required: true
      in: query
      description: Search for user by username
      allowEmptyValue: false
    IdParam:
      schema:
        description: |
            The Id of the user
        type: string
        example: a35f6dfa-69dc-11ed-a1eb-0242ac120002
        pattern: '^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$'
        minLength: 36
        maxLength: 36
      name: id
      required: true
      allowEmptyValue: false
      in: path
      description: Id of the user
    ImageIdParam:
      schema:
        description: |
            The id of the image
        type: string
        example: a35f6dfa-69dc-11ed-a1eb-0242ac120002
        pattern: '^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$'
        minLength: 36
        maxLength: 36      
      name: imageId
      required: true
      allowEmptyValue: false
      in: path
      description: Id of the image
    Index:
      schema:
        description: |
            The index of the comment to delete
        type: integer
        minimum: 0
        maximum: 99999999999
      name: index
      required: true
      allowEmptyValue: false
      in: query
      description: The index of the comment to delete
